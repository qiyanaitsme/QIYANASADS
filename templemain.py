from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import BOT_TOKEN, ZELENKA_TOKEN, ADMIN_IDS
from keyboards import (
    get_user_kb, get_admin_kb, get_settings_kb, get_profile_check_kb,
    get_back_kb, get_payment_request_kb, get_admin_payments_kb, get_payment_management_kb
)
from text_utils import normalize_text, check_status, extract_user_id, check_pinned_post
from api_client import ZelenkaAPI
from settings_manager import SettingsManager
from database import Database
from payment_api import PaymentAPI

class ProfileCheck(StatesGroup):
    waiting_for_id = State()

class PaymentStates(StatesGroup):
    waiting_for_amount = State()


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
api = ZelenkaAPI(ZELENKA_TOKEN)
settings_manager = SettingsManager()
db = Database()
payment_api = PaymentAPI()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    is_admin = message.from_user.id in ADMIN_IDS
    keyboard = get_admin_kb() if is_admin else get_user_kb()
    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZelenkaCheck!\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Zelenka.guru\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=keyboard
    )

@dp.message_handler(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def request_profile(message: types.Message):
    await ProfileCheck.waiting_for_id.set()
    await message.answer(
        "üéØ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ lolz.live/members/ID\n"
        "‚Ä¢ zelenka.guru/members/ID\n"
        "‚Ä¢ lzt.market/members/ID",
        reply_markup=get_back_kb()
    )

@dp.message_handler(text="üí° –ü–æ–º–æ—â—å")
async def help_cmd(message: types.Message):
    await message.answer(
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞ https://lolz.live/account/personal-details –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π ID (–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'\n"
        "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
        "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é"
    )

@dp.message_handler(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_cmd(message: types.Message):
    await message.answer(
        "ü§ñ ZelenkaCheck Bot\n\n"
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
        "üéØ –°–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"
    )


@dp.message_handler(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏")
async def payment_management(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    applications = await db.get_pending_applications()
    if not applications:
        await message.answer("üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É:\n\n"
    for app in applications:
        text += f"üë§ ID —Ñ–æ—Ä—É–º–∞: {app[2]}\nüìÖ –î–∞—Ç–∞: {app[4]}\n\n"

    await message.answer(
        text,
        reply_markup=get_admin_payments_kb(applications)
    )

@dp.message_handler(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    settings = settings_manager.load_settings()
    current_mode = settings.get('check_mode', 'exact')
    mode_text = "–¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if current_mode == "exact" else "–¢–æ–ª—å–∫–æ URL"

    await message.answer(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_text}",
        reply_markup=get_settings_kb(current_mode)
    )

@dp.callback_query_handler(lambda c: c.data == "toggle_check_mode")
async def toggle_check_mode(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    settings = settings_manager.load_settings()
    current_mode = settings.get('check_mode', 'exact')
    new_mode = 'url' if current_mode == 'exact' else 'exact'

    settings['check_mode'] = new_mode
    settings_manager.save_settings(settings)

    mode_text = "–¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞" if new_mode == "exact" else "–¢–æ–ª—å–∫–æ URL"
    await callback_query.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_text}",
        reply_markup=get_settings_kb(new_mode)
    )

@dp.callback_query_handler(lambda c: c.data == "recheck")
async def recheck_profile(callback_query: types.CallbackQuery):
    await callback_query.answer("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

@dp.message_handler(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã")
async def reload_templates(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    settings_manager.reload_templates()
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


@dp.callback_query_handler(lambda c: c.data == "approve_payment")
async def set_payment_amount(callback: types.CallbackQuery, state: FSMContext):
    message_text = callback.message.text
    try:
        # More robust ID extraction
        forum_id = message_text.split('ID —Ñ–æ—Ä—É–º–∞: ')[1].split('\n')[0].strip()

        async with state.proxy() as data:
            data['forum_id'] = forum_id

        await PaymentStates.waiting_for_amount.set()
        await callback.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è ID {forum_id}:")
    except IndexError:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message_handler(state=ProfileCheck.waiting_for_id)
async def process_id(message: types.Message, state: FSMContext):
    user_id = extract_user_id(message.text)
    if not user_id:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 5680221\n"
            "‚Ä¢ lolz.live/members/5680221\n"
            "‚Ä¢ zelenka.guru/members/5680221",
            reply_markup=get_profile_check_kb()
        )
        return

    settings = settings_manager.load_settings()
    check_mode = settings.get('check_mode', 'exact')
    template = settings_manager.load_template()

    await message.answer("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...")
    data = await api.get_profile_data(user_id)

    if not data or not data.get('profile_posts'):
        await message.answer(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=get_profile_check_kb()
        )
        await state.finish()
        return

    post = data['profile_posts'][0]
    timeline_user = post.get('timeline_user', {})
    status = timeline_user.get('custom_title', '')
    pinned_post = post.get('post_body', '')

    # Get avatar URL
    avatar_url = timeline_user.get('links', {}).get('avatar', '–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

    status_match = "‚úÖ" if check_status(status, template['custom_title'], check_mode) else "‚ùå"
    pinned_match = "‚úÖ" if check_pinned_post(pinned_post, template['pinned_post']) else "‚ùå"

    result = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {timeline_user.get('username')}\n"
        f"üÜî ID: {user_id}\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status_match}\n"
        f"üìù –ó–∞–∫—Ä–µ–ø: {pinned_match}\n"
        f"üñº –ê–≤–∞—Ç–∞—Ä: {avatar_url}"
    )

    if status_match == "‚ùå" or pinned_match == "‚ùå":
        await message.answer(result, reply_markup=get_profile_check_kb())
    else:
        await message.answer(result, reply_markup=get_payment_request_kb())

    await state.finish()


@dp.message_handler(state=PaymentStates.waiting_for_amount)
async def process_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        async with state.proxy() as data:
            forum_id = data['forum_id']

        # Get user_id from database
        user_id = await db.get_user_id_by_forum_id(forum_id)

        if await db.check_payment_exists(forum_id):
            await message.answer(f"‚ö†Ô∏è –í—ã–ø–ª–∞—Ç–∞ –¥–ª—è ID {forum_id} —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!")
            await state.finish()
            return

        payment_result = await payment_api.send_payment(forum_id, amount)
        if payment_result:
            await db.update_application_status(forum_id, 'approved')
            await message.answer(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –¥–ª—è ID {forum_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ö–æ–ª–¥–æ–º")
            # Notify user
            if user_id:
                await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ö–æ–ª–¥–æ–º")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–ø–ª–∞—Ç—ã")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    finally:
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == "reject_payment")
async def reject_payment(callback: types.CallbackQuery):
    try:
        forum_id = callback.message.text.split('ID —Ñ–æ—Ä—É–º–∞: ')[1].split('\n')[0].strip()
        # Get user_id from database
        user_id = await db.get_user_id_by_forum_id(forum_id)

        await db.update_application_status(forum_id, 'rejected')
        await callback.message.answer(f"‚ùå –í—ã–ø–ª–∞—Ç–∞ –¥–ª—è ID {forum_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        # Notify user
        if user_id:
            await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    except (IndexError, ValueError):
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã")


@dp.callback_query_handler(lambda c: c.data == "submit_payment_request")
async def submit_payment_request(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    forum_id = callback.message.text.split('üÜî ID: ')[1].split('\n')[0]
    avatar_url = callback.message.text.split('üñº –ê–≤–∞—Ç–∞—Ä: ')[1].split('\n')[0]

    await db.add_application(user_id, forum_id, "parameters")

    admin_message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É!\n\n"
        f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n"
        f"üÜî ID —Ñ–æ—Ä—É–º–∞: {forum_id}\n"
        f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç\n"
        f"üñº –ê–≤–∞—Ç–∞—Ä: {avatar_url}"
    )

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                reply_markup=get_payment_management_kb()
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")



@dp.message_handler(commands=['payments'], user_id=ADMIN_IDS)
async def show_pending_payments(message: types.Message):
    applications = await db.get_pending_applications()
    if not applications:
        await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç")
        return

    await message.answer(
        "–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç:",
        reply_markup=get_admin_payments_kb(applications)
    )

@dp.callback_query_handler(lambda c: c.data.startswith('approve_payment_'), user_id=ADMIN_IDS)
async def approve_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[2])

    payment_result = await payment_api.send_payment(user_id, 1)
    if payment_result and payment_result.get('success'):
        await db.update_application_status(user_id, 'approved')
        await callback.message.answer(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –¥–ª—è ID {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è ID {user_id}")

@dp.callback_query_handler(lambda c: c.data == "back_to_main", state="*")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    is_admin = callback.from_user.id in ADMIN_IDS
    keyboard = get_admin_kb() if is_admin else get_user_kb()

    await callback.message.answer(
        "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )
    await callback.message.delete()

async def on_startup(dp):
    await db.init()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)